#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "nuget: Hypar.Elements, *-*"

#!csharp

using Elements.Geometry;

new Vector3()

#!csharp

#!import Vectors/HexMath.cs

#!csharp

using Elements.Spatial.CellComplex;

// Assemble CellComplex from Grid2d
var numLevels = 1;
var levelHeight = 0.5;
var cellSize = 2;
var complex = new CellComplex();
complex.Tolerance = 0.1;
var pathMaterial = new Material("Path", new Color(1, 0, 0, 0.75));


var regionModel = new Model();

var hexes = HexMath.GenerateRosetteLinear(new(0,0,0),3)
    .Select(x => HexMath.GetHexPosition2d(x));

for (var i = 0; i < numLevels; i++)
{
    foreach (var hex in hexes)
    {
        var crv = Polygon.Ngon(6,HexMath.HalfHex);
        var transform = new Transform();
        transform.Rotate((0,0,1),30);
        transform.Move(hex);  
        crv.Transform(transform);

        complex.AddCell(crv, levelHeight, i * levelHeight);    
    }
}

var cellModel = new Model();

// Draw base CellComplex
foreach (var face in complex.GetFaces())
{
    cellModel.AddElement(new Panel(face.GetGeometry(), BuiltInMaterials.Mass));
}

cellModel

#!csharp

complex.GetCells().Select(x => x.GetBottomFace().GetGeometry())

#!csharp

complex.GetCells().SelectMany(x => x.GetBottomFace().GetGeometry().Vertices).GroupBy(x => x.X)

#!csharp

complex.GetCells().Select(x => x.GetNeighbors().Count)

#!csharp

var hexes = new string[]
{
    "#ff80ed",
    "#065535",
    "#000000",
    "#ffc0cb",
    "#133337",
    "#ffffff",
    "#ffe4e1",
    "#008080",
    "#ff0000",
    "#e6e6fa",
    "#ffd700",
    "#00ffff",
    "#ffa500",
    "#0000ff",
    "#c6e2ff",
    "#ff7373",
    "#40e0d0",
    "#b0e0e6",
    "#d3ffce",
    "#f0f8ff",
    "#666666",
    "#faebd7",
    "#bada55",
    "#003366",
    "#fa8072",
    "#ffb6c1",
    "#ffff00",
    "#c0c0c0",
    "#800000",
    "#c39797",
    "#800080",
    "#00ff00",
    "#7fffd4",
    "#fff68f",
    "#cccccc",
    "#eeeeee",
    "#20b2aa",
    "#f08080",
    "#ffc3a0",
    "#333333",
    "#c0d6e4",
    "#66cdaa",
    "#ff6666",
    "#ff00ff",
    "#ff7f50",
    "#cbbeb5",
    "#ffdab9",
    "#468499",
    "#afeeee"
};

var colors = hexes.Select(x => new Color(x));

#!csharp

var coolModel = new Model();

static T PickRandom<T>(this IEnumerable<T> list){
    return list.Skip(Random.Shared.Next(list.Count())).First();
}

static IEnumerable<T> PickRandomOrNone<T>(this IEnumerable<T> list){

    if(list.Count() == 0) return new List<T>();

    if(list.Count() == 1) return new List<T>(){list.Single()};

    return list.Skip(Random.Shared.Next(list.Count())).Take(1);
}


static IEnumerable<int> AsList(this int max){
    return Enumerable.Range(0,10);
}

static int OrBelow(this int max){
    return Random.Shared.Next(max+1);
}

var unusedCells = new HashSet<Cell>();

foreach(var cell in complex.GetCells()){
    unusedCells.Add(cell);
}

IList<IEnumerable<Cell>> cellGroups = new List<IEnumerable<Cell>>();

while(unusedCells.Count > 0){

    var outs = new List<Cell>();

    var startCell = unusedCells.PickRandom(); 

    outs.Add(startCell);

    foreach(var iteration in 6.OrBelow().AsList())
    {
        var next = startCell.GetNeighbors().Where(x => unusedCells.Contains(x)).PickRandomOrNone();

        outs.AddRange(next);

        startCell = next.Count() == 0 ? 
            outs.PickRandom() : 
            next.Single();


    }

    var distinct = outs.Distinct();    

   var material = new Material("color",colors.Select(x => new Color(x.Red,x.Green,x.Blue,1)).PickRandom());

    var isSmallRoom = distinct.Count() < 5;
    
foreach (var cell in distinct)
{
    unusedCells.Remove(cell);

    //if(isSmallRoom) continue;

    cellGroups.Add(distinct as IEnumerable<Cell>);

    var rep = new Representation(new[] { cell.GetGeometry() });
    coolModel.AddElement(new GeometricElement(new Transform(), material, rep, false, Guid.NewGuid(), "Path"));
}
}



coolModel

#!csharp

cellGroups
