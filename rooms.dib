#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "nuget: Hypar.Elements, *-*"

#!csharp

var polyline = new Polyline((0,0),(0,1),(1,1),(1,0),(0,0));
polyline

#!csharp

using Elements.Spatial;

// Create a 2d grid that's 40 x 30 in size
var grid = new Grid2d(100, 80);

// Access the U and V axes directly and use 1d subdivision methods on them
grid.U.DivideByFixedLength(5, FixedDivisionMode.RemainderAtBothEnds);
grid.V.DivideByPattern(new[] { 5.0 });

foreach(var cell in grid.CellsFlat){

    if(Random.Shared.Next(3) < 1) continue;

    //cell.V.DivideByCount(Random.Shared.Next(1,3));
    //cell.U.DivideByCount(Random.Shared.Next(1,3));

}




var polygon = (Polygon)grid.GetCellGeometry();

// Create a floor from the entire grid's boundary
var floor = new Floor(polygon, 0.5, new Transform(0, 0, -0.51));

// Create model curves from all subdivided cells of the grid
var modelCurves = grid.ToModelCurves();

var model = new Model();

model.AddElements(modelCurves);
//model.AddElement(floor);

model

#!csharp

var rooms = new Model();

foreach(var curve in grid.ToModelCurves()){

    var boundary = (Polygon)curve.Curve;

    boundary = boundary.Offset(-0.2).Single();

    var room = new Elements.Space(new Profile(boundary),2.4);

    rooms.AddElement(room);


}

rooms

#!csharp

using Elements.Spatial.CellComplex;

// Assemble CellComplex from Grid2d
var numLevels = 1;
var levelHeight = 3;
var cellSize = 2;
var complex = new CellComplex();
var boundary = new Circle(new Vector3(), 10).ToPolygon();
var pathMaterial = new Material("Path", new Color(1, 0, 0, 0.75));


var regionModel = new Model();


for (var i = 0; i < numLevels; i++)
{
    foreach (var cell in grid.GetCells())
    {
        foreach (var crv in cell.GetTrimmedCellGeometry())
        {
            complex.AddCell((Polygon)crv, levelHeight, i * levelHeight, grid.U, grid.V);
        }
    }
}

// Draw base CellComplex
foreach (var face in complex.GetFaces())
{
    regionModel.AddElement(new Panel(face.GetGeometry(), BuiltInMaterials.Mass));
}

// Traverse CellComplex
var start = new Vector3(40, 40, 40);
var end = new Vector3(-30, -40, 0);

// Draw lines from start and end to closest points, for reference
foreach (var pt in new List<Vector3>() { start, end })
{
    var closest = complex.GetClosestVertex(pt).GetGeometry();
    regionModel.AddElement(new ModelCurve(new Line(pt, closest), pathMaterial));
}

var curCell = complex.GetClosestCell(start);



var traversedCells = curCell.TraverseNeighbors(end);

foreach (var cell in traversedCells)
{
    var rep = new Representation(new[] { cell.GetGeometry() });
    regionModel.AddElement(new GeometricElement(new Transform(), pathMaterial, rep, false, Guid.NewGuid(), "Path"));
}

regionModel

#!csharp

var hexes = new string[]{
    "#ff80ed",
"#065535",
"#000000",
"#133337",
"#ffc0cb",
"#ffffff",
"#ffe4e1",
"#008080",
"#ff0000",
"#e6e6fa",
"#ffd700",
"#00ffff",
"#ffa500",
"#0000ff",
"#c6e2ff",
"#ff7373",
"#40e0d0",
"#b0e0e6",
"#d3ffce",
"#f0f8ff",
"#666666",
"#faebd7",
"#bada55",
"#003366",
"#fa8072",
"#ffb6c1",
"#ffff00",
"#c0c0c0",
"#800000",
"#c39797",
"#800080",
"#00ff00",
"#7fffd4",
"#fff68f",
"#cccccc",
"#eeeeee",
"#20b2aa",
"#f08080",
"#ffc3a0",
"#333333",
"#c0d6e4",
"#66cdaa",
"#ff6666",
"#ff00ff",
"#ff7f50",
"#cbbeb5",
"#ffdab9",
"#468499",
"#afeeee"
};

var colors = hexes.Select(x => new Color(x));

#!csharp

var coolModel = new Model();

traversedCells.Clear();

static T PickRandom<T>(this IEnumerable<T> list){
    return list.Skip(Random.Shared.Next(list.Count())).First();
}

static IEnumerable<T> PickRandomOrNone<T>(this IEnumerable<T> list){

    if(list.Count() == 0) return new List<T>();

    if(list.Count() == 1) return new List<T>(){list.Single()};

    return list.Skip(Random.Shared.Next(list.Count())).Take(1);
}


static IEnumerable<int> AsList(this int max){
    return Enumerable.Range(0,10);
}

static int OrBelow(this int max){
    return Random.Shared.Next(max+1);
}

var unusedCells = new HashSet<Cell>();

foreach(var cell in complex.GetCells()){
    unusedCells.Add(cell);
}

IList<IEnumerable<Cell>> groups = new List<IEnumerable<Cell>>();

while(unusedCells.Count > 0){

    var outs = new List<Cell>();

    var startCell = unusedCells.PickRandom(); 

    outs.Add(startCell);

    foreach(var iteration in 6.OrBelow().AsList())
    {
        var next = startCell.GetNeighbors().Where(x => unusedCells.Contains(x)).PickRandomOrNone();

        outs.AddRange(next);

        startCell = next.Count() == 0 ? 
            outs.PickRandom() : 
            next.Single();


    }

    var distinct = outs.Distinct();    

   var material = new Material("color",colors.Select(x => new Color(x.Red,x.Green,x.Blue,1)).PickRandom());

    var isSmallRoom = distinct.Count() < 3;
    
foreach (var cell in distinct)
{
    unusedCells.Remove(cell);

    if(isSmallRoom) continue;

    groups.Add(distinct as IEnumerable<Cell>);

    var rep = new Representation(new[] { cell.GetGeometry() });
    coolModel.AddElement(new GeometricElement(new Transform(), material, rep, false, Guid.NewGuid(), "Path"));
}
}



coolModel
